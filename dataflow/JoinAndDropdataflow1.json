{
	"name": "JoinAndDropdataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "OLTP_Json1",
						"type": "DatasetReference"
					},
					"name": "OrderData1"
				},
				{
					"dataset": {
						"referenceName": "OrderLinesTable1",
						"type": "DatasetReference"
					},
					"name": "OrderLines1"
				},
				{
					"dataset": {
						"referenceName": "PackageTypesJson1",
						"type": "DatasetReference"
					},
					"name": "PackageTypes1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ODS_OrderTable1",
						"type": "DatasetReference"
					},
					"name": "sinkintoOrder1"
				}
			],
			"transformations": [
				{
					"name": "joinwithPackageTypes1"
				},
				{
					"name": "joinwithOrderLinesJoin1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          OrderID as integer,",
				"          CustomerID as integer,",
				"          SalespersonPersonID as integer,",
				"          PickedByPersonID as integer,",
				"          ContactPersonID as integer,",
				"          BackorderOrderID as integer,",
				"          OrderDate as string,",
				"          ExpectedDeliveryDate as string,",
				"          CustomerPurchaseOrderNumber as string,",
				"          IsUndersupplyBackordered as boolean,",
				"          Comments as string,",
				"          DeliveryInstructions as string,",
				"          InternalComments as string,",
				"          PickingCompletedWhen as string,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> OrderData1",
				"source(output(",
				"          OrderLineID as integer,",
				"          OrderID as integer,",
				"          StockItemID as integer,",
				"          Description as string,",
				"          PackageTypeID as integer,",
				"          Quantity as integer,",
				"          UnitPrice as decimal(18,2),",
				"          TaxRate as decimal(18,3),",
				"          PickedQuantity as integer,",
				"          PickingCompletedWhen as timestamp,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> OrderLines1",
				"source(output(",
				"          PackageTypeID as integer,",
				"          PackageTypeName as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as string,",
				"          ValidTo as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> PackageTypes1",
				"OrderLines1, PackageTypes1 join(OrderLines1@PackageTypeID == PackageTypes1@PackageTypeID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinwithPackageTypes1",
				"OrderData1, joinwithPackageTypes1 join(OrderData1@OrderID == OrderLines1@OrderID,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinwithOrderLinesJoin1",
				"joinwithOrderLinesJoin1 select(mapColumn(",
				"          OrderID = OrderData1@OrderID,",
				"          CustomerID,",
				"          SalespersonPersonID,",
				"          PickedByPersonID,",
				"          BackorderOrderID,",
				"          OrderDate,",
				"          PickingCompletedWhen = OrderData1@PickingCompletedWhen,",
				"          LastEditedBy = OrderData1@LastEditedBy,",
				"          LastEditedWhen = OrderData1@LastEditedWhen,",
				"          OrderLineID,",
				"          StockItemID,",
				"          Description,",
				"          PackageTypeID = OrderLines1@PackageTypeID,",
				"          Quantity,",
				"          UnitPrice,",
				"          TaxRate,",
				"          PickingCompletedWhen = OrderLines1@PickingCompletedWhen,",
				"          PackageTypeID = PackageTypes1@PackageTypeID,",
				"          PackageTypeName,",
				"          LastEditedBy = PackageTypes1@LastEditedBy,",
				"          ValidFrom,",
				"          ValidTo",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkintoOrder1"
			]
		}
	}
}